name: gpr

on: [push,repository_dispatch]

env:
  NBGV_VERSION: 3.1.91
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1 
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true # for nbgv
  
  GprToolCsprojPath: src/GprTool/GprTool.csproj
  GprToolTestsCsprojPath: test/GprTool.Tests/GprTool.Tests.csproj
  TestResultsDirectory: TestResults
  PackageOutputPath: nupkgs

jobs:

  build-and-test:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup dotnet using global.json
        uses: actions/setup-dotnet@v1.5.0
    
      - uses: dotnet/nbgv@v0.3.1
        with:
          setAllVars: true
          
      - name: Build
        shell: bash
        run: |
          dotnet build $GprToolCsprojPath -c Release -p:GeneratePackageOnBuild=True
          
      - name: Test
        shell: bash
        run: |
          dotnet test $GprToolTestsCsprojPath -c Release --logger:nunit --verbosity normal -p:IsRunningTests=True --results-directory $TestResultsDirectory
          
      - name: Self publish tool
        if: github.repository == 'jcansdale/gpr' && matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          dotnet run --project $GprToolCsprojPath -- push $PackageOutputPath -k ${{ secrets.GITHUB_TOKEN }}

      - name: Upload nupkg
        if: github.repository == 'jcansdale/gpr'
        uses: actions/upload-artifact@v2
        with:
          name: nupkgs-${{ matrix.os }}
          path: ${{ github.workspace }}/${{ env.PackageOutputPath }}/**/*
        
  publish:
     if: github.repository == 'jcansdale/gpr' && github.ref == 'refs/heads/master'
     runs-on: ubuntu-latest
     name: Publish nuget packages
     needs: [build-and-test]
     steps:      
      - name: Download nupkgs
        uses: actions/download-artifact@v2
        with:
          name: nupkgs-ubuntu-latest
          path: ${{ github.workspace }}/${{ env.PackageOutputPath }}

      - name: Push nuget packages 
        if: github.ref == 'refs/heads/master'
        shell: bash
        run: dotnet nuget push $PackageOutputPath/*.nupkg --source nuget.org --api-key ${{ secrets.NUGET_TOKEN }}
          
      - name: Create github release tag
        if: success() && github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.BUILD_VERSION }}
          release_name: Release v${{ env.BUILD_VERSION }}
          draft: true
          prerelease: false
